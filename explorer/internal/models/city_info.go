// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CityInfo city info
//
// swagger:model CityInfo
type CityInfo struct {

	// city name
	CityName CityName `json:"city_name,omitempty"`

	// country name
	CountryName CountryName `json:"country_name,omitempty"`
}

// Validate validates this city info
func (m *CityInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCityName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountryName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CityInfo) validateCityName(formats strfmt.Registry) error {
	if swag.IsZero(m.CityName) { // not required
		return nil
	}

	if err := m.CityName.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("city_name")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("city_name")
		}
		return err
	}

	return nil
}

func (m *CityInfo) validateCountryName(formats strfmt.Registry) error {
	if swag.IsZero(m.CountryName) { // not required
		return nil
	}

	if err := m.CountryName.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("country_name")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("country_name")
		}
		return err
	}

	return nil
}

// ContextValidate validate this city info based on the context it is used
func (m *CityInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCityName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCountryName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CityInfo) contextValidateCityName(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CityName.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("city_name")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("city_name")
		}
		return err
	}

	return nil
}

func (m *CityInfo) contextValidateCountryName(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CountryName.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("country_name")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("country_name")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CityInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CityInfo) UnmarshalBinary(b []byte) error {
	var res CityInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
