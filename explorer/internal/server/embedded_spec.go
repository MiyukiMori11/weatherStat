// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API for WeatherStat explorer service",
    "title": "WeatherStat Explorer API",
    "version": "1.0.0"
  },
  "basePath": "/api/explorer",
  "paths": {
    "/cities": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Returns a cities stat.",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CitiesStat"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Adds a new city into subscripton list",
        "parameters": [
          {
            "$ref": "#/parameters/CityBody"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "City not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Deletes city from subscription list",
        "parameters": [
          {
            "$ref": "#/parameters/CityNameQuery"
          },
          {
            "$ref": "#/parameters/CountryNameQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/temp": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Returns an average temp for archive period",
        "parameters": [
          {
            "$ref": "#/parameters/CityNameQuery"
          },
          {
            "$ref": "#/parameters/CountryNameQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CityTemp"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "City not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    }
  },
  "definitions": {
    "CitiesStat": {
      "type": "object",
      "properties": {
        "cities": {
          "description": "List of cities in the subscription",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CityInfo"
          }
        },
        "cities_count": {
          "description": "Number of cities in the subscription",
          "type": "integer"
        }
      }
    },
    "CityBodySchema": {
      "type": "object",
      "properties": {
        "country": {
          "$ref": "#/definitions/CountryName"
        },
        "name": {
          "$ref": "#/definitions/CityName"
        }
      }
    },
    "CityInfo": {
      "type": "object",
      "properties": {
        "city_name": {
          "$ref": "#/definitions/CityName"
        },
        "country_name": {
          "$ref": "#/definitions/CountryName"
        }
      }
    },
    "CityName": {
      "type": "string",
      "maxLength": 25,
      "pattern": "^[\\w\\-\\' ]+"
    },
    "CityTemp": {
      "type": "object",
      "properties": {
        "avg_c": {
          "description": "Average temperature in Celsius",
          "type": "integer"
        },
        "avg_f": {
          "description": "Average temperature in Fahrenheit",
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "CountryName": {
      "type": "string",
      "maxLength": 25,
      "pattern": "^[\\w\\-\\' ]+"
    }
  },
  "parameters": {
    "CityBody": {
      "name": "city",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/CityBodySchema"
      }
    },
    "CityNameQuery": {
      "maxLength": 25,
      "pattern": "^[\\w\\-\\' ]+",
      "type": "string",
      "name": "city_name",
      "in": "query",
      "required": true
    },
    "CountryNameQuery": {
      "maxLength": 25,
      "pattern": "^[\\w\\-\\' ]+",
      "type": "string",
      "name": "country_name",
      "in": "query",
      "required": true
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API for WeatherStat explorer service",
    "title": "WeatherStat Explorer API",
    "version": "1.0.0"
  },
  "basePath": "/api/explorer",
  "paths": {
    "/cities": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Returns a cities stat.",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CitiesStat"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Adds a new city into subscripton list",
        "parameters": [
          {
            "name": "city",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CityBodySchema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "City not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Deletes city from subscription list",
        "parameters": [
          {
            "maxLength": 25,
            "pattern": "^[\\w\\-\\' ]+",
            "type": "string",
            "name": "city_name",
            "in": "query",
            "required": true
          },
          {
            "maxLength": 25,
            "pattern": "^[\\w\\-\\' ]+",
            "type": "string",
            "name": "country_name",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/temp": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Returns an average temp for archive period",
        "parameters": [
          {
            "maxLength": 25,
            "pattern": "^[\\w\\-\\' ]+",
            "type": "string",
            "name": "city_name",
            "in": "query",
            "required": true
          },
          {
            "maxLength": 25,
            "pattern": "^[\\w\\-\\' ]+",
            "type": "string",
            "name": "country_name",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CityTemp"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "City not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    }
  },
  "definitions": {
    "CitiesStat": {
      "type": "object",
      "properties": {
        "cities": {
          "description": "List of cities in the subscription",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CityInfo"
          }
        },
        "cities_count": {
          "description": "Number of cities in the subscription",
          "type": "integer",
          "minimum": 0
        }
      }
    },
    "CityBodySchema": {
      "type": "object",
      "properties": {
        "country": {
          "$ref": "#/definitions/CountryName"
        },
        "name": {
          "$ref": "#/definitions/CityName"
        }
      }
    },
    "CityInfo": {
      "type": "object",
      "properties": {
        "city_name": {
          "$ref": "#/definitions/CityName"
        },
        "country_name": {
          "$ref": "#/definitions/CountryName"
        }
      }
    },
    "CityName": {
      "type": "string",
      "maxLength": 25,
      "pattern": "^[\\w\\-\\' ]+"
    },
    "CityTemp": {
      "type": "object",
      "properties": {
        "avg_c": {
          "description": "Average temperature in Celsius",
          "type": "integer"
        },
        "avg_f": {
          "description": "Average temperature in Fahrenheit",
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "CountryName": {
      "type": "string",
      "maxLength": 25,
      "pattern": "^[\\w\\-\\' ]+"
    }
  },
  "parameters": {
    "CityBody": {
      "name": "city",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/CityBodySchema"
      }
    },
    "CityNameQuery": {
      "maxLength": 25,
      "pattern": "^[\\w\\-\\' ]+",
      "type": "string",
      "name": "city_name",
      "in": "query",
      "required": true
    },
    "CountryNameQuery": {
      "maxLength": 25,
      "pattern": "^[\\w\\-\\' ]+",
      "type": "string",
      "name": "country_name",
      "in": "query",
      "required": true
    }
  }
}`))
}
